
import serial
import codecs
from sys import argv
from os.path import exists
import time
from statistics import mean

testcomport=['COM1','COM2','COM3','COM4','COM5','COM6','COM7','COM8','COM9','COM10']

class SensorRFID:
    baudrate=57600
    comport=''
    serialport=''
    portisgood=0
    value_ave_final=0
    value_ave_sum=0
    value_ave_count=0
    value_ave_max=10
    averageresultof=10
    returnvalue="" #get from function readserial()
    millislastread=time.process_time_ns()
    connect_portinterger=0
    connect_portinterger_max=10
    
    
class SensorWeight:
    baudrate=9600
    comport=''
    serialport=''
    portisgood=0
    
    value_ave_final=0
    value_ave_sum=0
    value_ave_count=0
    averageresultof=10
    value_ave_array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] 
    
    returnvalue="" #get from function readserial()
    millislastread=time.process_time_ns()
    connect_portinterger=0
    connect_portinterger_max=10
    def countaverage2(self,new_value):
        
      #kick out old self.value_ave_array
        self.value_ave_array.pop(0)

      #add new_value to self.value_ave_array
        self.value_ave_array.insert(0,0)

        print(self.value_ave_array)
    
    def countaverage(self): 
             
            if len(self.value_ave_array) == 0:
                avg=0
            else:
                avg = sum(self.value_ave_array) / len(self.value_ave_array) 
            print("Average is ")
            print(avg)
            return avg

    def countmean(self):
        countmean = mean(self.value_ave_array)
        print("Mean is")
        print(countmean)
        return countmean
        
    
    def readserial():
        value=serialport.readline()
        print("value is ...")
        print(value)
        return value
    def loop(self):
        if self.serialport=='':
            self.connect()
            return()
        self.returnvalue=self.readserial
        
        print(self.readserial)
    def connect(self):
        print("trying to connect to")
        print(testcomport[self.connect_portinterger])
        try:
            self.serialport=serial.Serial(testcomport[self.connect_portinterger],9600)
            print("using"+self.serialport.name)
        except :
            print("Warning","cannot open")
            self.connect_portinterger+=1
            if self.connect_portinterger>= self.connect_portinterger_max:
                self.connect_portinterger=0
                time.sleep(1)


snowscale=SensorWeight()
snowscale.countaverage()
snowscale.countmean()
    
